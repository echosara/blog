---
layout:     post
title:      "git学习笔记"
subtitle:   "开始用git管理博客"
date:       2017-08-29
author:     "Echo"
header-img: "img/post-bg-git.jpg"
catalog: true
tags:
    - git/github
---

##  如何用git管理一个文件

### 管理流程

1. 启动Git Bash程序，使用cd指令切换到你需要管理的文件夹：`cd '文件夹路径'`

2. 执行以下指令，让Git开始管理这个文件夹：
   `git init`

   > 补充说明，
   >
   > 1. Git可以管理任何一个文件夹中的文件和子文件夹，
   > 2. Git可以处理中文名称的文件和文件夹。只是Git Bash会出现乱码
   > 3. git help -a,可以显示所有指令列表
   > 4. 反斜杠\结尾可以换行

3. 我们创建了这个markdown的文件，看git是如何管理的。

4. 执行这个命令，准备送到文档库储存。
   `git add _posts/2017-08-29-Git.markdown`
   但是出现了一些状况，Git Bash上显示一个warning
   `LF will be replaced by CRLF in _posts/2017-08-29-Git.markdown`
   看了一些大佬们的解释，说发生这个问题主要是Windows和Unix系统的换行符不同，LF是Unix标志，CRLF是Windows的标志。balabala
   重复1,2步操作之后，输入git命令
   `git config core.autocrlf false`
   之后一切正常了。

5. 输入命令`git status`可以查看文档库的状态

6. 在输入命令git commit 的时候出现了很多问题，比如说需要config

7. 配置完config之后直接commit就行了

### config的配置

Git有三个不同优先级的配置文件，高优先级覆盖低优先级。

1. 文件夹中“。git”子文件夹内的config文件，具有最高优先级
2. 登录账号的home directory 中的config文件，具有次一级的优先级
3. Git安装文件夹中的etc\gitconfig文件 最低优先级

**显示**           可以用`git config -l`显示三个配置文件中所有配置信息

**设定**               `git config user.name 'echo'`和`git config user.email 'zhujihongecho@gmail.com'`可以指定用                              

​                      户名和邮箱。

​                    在config 后面加`--global`或者`--system`可以去更改权限

**更改** `git config --unset user.name`对设置进行删除

### git指令

`git config alias.指定别名 '正式的指令和选项'`

> 哇，好开心要，输入Git commit之后会进入默认的Vi编辑器，然后我知道怎么退出vi了按Esc之后按两下大写的ZZ    被Linus搞了><

### 排除不需要加入文档库的文件   

Git会把文件分成三类

1. 被跟踪的文件（tracked）；
2. 忽略的（ignored）；
3. 不被跟踪的（untracked）；

一开始所有的文件都是untracked的，理想情况下，文件应该分为tracked和ignored两种，tracked的文件就是被加入git文档库中的。会对文档的更新情况进行跟踪。untracked的不会做任何处理，只会一直显示untracked。ignored是明确了untracked的意思。

**tracked**   使用`git add 文件名`的命令会使文件加入git文件库中。

**ignored**   用.gitignored 文件可以设置忽略的文件，

1.  使用`touch .gitignore`创建这个文件。
2.  用文字编辑程序打开".gitignore” 文件，将要忽略的文件写到文档里

就OK了

.gitignore文件的语法，用#字符开头表示注释，文件夹路径用/字符，文件名可以用通配符*，另外！表示排除

###   取出各个版本的代码

> 这是真正有趣的事情了

1. 首先使用`git log`查看commit的标识码和每一次commit的message
2. 然后`git checkout 标识码 文件名`取出那一时刻的代码。

