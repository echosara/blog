---
layout:     post
title:      "Python学习经历"
subtitle:   "谢谢你，教我如何去爱"
date:       2017-08-22
author:     "Echo"
header-img: "img/post-bg-alone.jpg"
catalog: true
tags:
    - Python
---




# 前言

数学建模和我大多数竞赛经历一样，不算太愉快，无所保留的努力，然后被泼了冷水，但是参加的话也是也很多的好处的，接触了latex，github，然后是Python，然后想看看机器学习的世界是怎么样的。当然python也可以做其他的事情，

1. 网页爬虫（Screpy）
2. 数据挖掘（DM）数据挖掘里常用的算法Python里都有实现，可参照[Scikit Learn](http://www.zhihu.com/question/20216472/answer/14681156)

# 正文

## 变量和地址的关系

在C语言中，编译系统为变量分配内存空间，当改变变量的值时，改变的是内存空间的内容，在程序运行过程中，变量的地址不再发生改变的，即变量对应的内存空间是固定的。Python语言则不同，它采用的是基于值的内存管理方式，不同的值分配不同的内存空间。当给变量赋值是，Python解释器为该值分配一个内存空间，而变量则指向这个空间，当变量的值改变的时候，改变的并不是该内存空间的内容，而是改变了变量的指向关系，使变量指向另一内存空间。这可理解为，Python变量不是某一个固定内存单元的标识，而是对内存中存储的某个数据的引用（reference）

Python 和java一样对于没有变量指向的值（称为垃圾数据）Python自动将其删除。称为垃圾删除（garbage collection），python中的id（）函数可以返回对象的地址。

python解释器会对出现的每一个对象分配内存空间，即使它们的值一样，但是为了提高内存的利用率对于一些简单的int类型并且数值很小，python采用重用对象内存的方法不，会为它重复分配空间。

下划线(_)在python中是一个特殊的变量，用来表示上一次运算的结果。

## 复合数据类型

列表、元组、字典和集合类型的数据包含多个相互关联的数据元素，所以称它们为复合数据类型。字符串也是一种复合数据类型，元素是单个字符。列表、元组和字符串是有顺序的数据元素的集合体，称为序列。序列具有顺序存取的特征，可以通过各数据元素在序列中的位置编号（索引）来访问数据元素。字典和集合属于无顺序的数据集合体，数据元素没有特定的排列顺序，因此不能像序列那样通过编号来访问数据元素。



## 函数定义

Python定义函数的关键字是def，相当于MATLAB里面的function一样，在函数定义的时候设置输入参数的值，就会成为默认参数值。

如果你要传递的参数是列表的形式，但是调用的函数接受一个，一个参数的值，可以用*操作符把列表拆开*

```python

    list(range(3,6))

    [3,4,5]

    arg=[3,6]

    list(range(*args))

    [3,4,5]
```

## 编码风格

1. 使用4空格，而非TAB
  在使用小缩进（可以嵌套更深）和大缩进（更易读）之间，4空格是一个很好的折中。TAB引发了一些混乱，最后弃用

2. *折行以确保不会超过79个字符

3. 这有助于小显示器用户阅读，也可以让大显示器能并联显示几个代码文件

4. 使用空行分割函数和类，以及函数中的大块代码

5. 可能的话，注释独占一行

6. 使用文档字符串

7. 把空格放在操作符两边，以及逗号后面，但是括号里侧不加空格：```a = f(1,2) + g(3,4)```

8. 统一函数和类命名
    推荐类名用```驼峰命名```，函数和方法名用```小写_和下划线```。总是用```self```作为方法的第一个参数（）

9. 不要使用花哨的编码，如果你的代码的目的是要在国际化的环境。Python的默认情况下，UTF-8，甚至普通的ASCII总是工作的最好

10. 同样，也不要使用非ASCII字符，除非是不同语种的会阅读或者维护代码。

______

 

详细阅读见<http://www.pythondoc.com/pythontutorial3/datastructures.html>

## 数据结构

### 堆栈

堆栈（stack）又称为栈或堆叠，是一种特殊的串列形式的数据结构，其特殊之处在于只能运行链接串列或者阵列的一端（称为堆叠顶端指标，top）进行加入数据（push）和输出数据（pop）的运算，另外栈也可以用一维数组或连结串列的形式来完成。另外一个相对的操作方式称为queue

由于堆叠数据结构只允许在一端进行操作，因而按照后进先出（LIFO，Last In First Out）的原理运作。用Python就可以用```append()```和```pop```来实现

### 队列

和堆栈不同在于最先进入的元素最先释放（先入先出）。在头部插入和弹出很慢（因为，为了一个元素的，要移动整个列表中的所有元素）所以列表这样用效率不高。

Python使用[collection.deque](https://docs.python.org/3/library/collections.html#collections.deque),专为首尾快速插入和删除而设计

## 面向对象编程

面向对象编程设计是一种以对象为基础，以事件或消息来驱动对象执行处理的程序设计方法。表现形式是数据与程序代码（函数）的统一，定义在一个称为类（class）的数据结构中。类是一个集体名词，代表一个种类，是一类具有共同属性的个体的总称。类似数学概念“集合”。其中的个体称为对象（object），或称实例（instance）。

面向对象程序设计是一种自上而下的程序设计方法。它不像面向过程程序设计那样，一开始就要求程序设计者构造出整个程序宏观结构，而是从问题的一部分入手，一点一点地构建整个程序。类作为程序的基本单位，函数是类之间交换数据的接口。

## 类

### 命名空间

命名空间是从命名到对象的映射。当前命名空间主要是通过Python字典实现的，不过通常不关心具体实现方式，除非出于性能考虑。以下是一些命名空间的example：内置命名（像abs（）这样的函数，以及内置异常名）集，模块中的全局命名，函数调用中的局部命名。某种意义上讲对象的属性集也是一个命名空间，关于命名空间需要了解一件very important 的事情是不同的命名空间中的命名没有任何联系，例如两个不同的模块可能都会定义一个名为maximize的函数而不会发生混淆-用户必须以模块名为前缀来引用它们。

### 模块（module）

模块是用来组织python代码的一种方法。当代码量比较大的时候，可以将代码分成多个彼此联系、又相互独立的代码段，这每个代码段可能包含数据成员和方法的类，这样的代码段是共享的，所以可将代码段通过（import）的手段加入到正在编写的程序中。这样看来，模块是一个包含诸多可共享的代码段的组织单位。

还有一个更大的单位，称为包，它是用来组织模块的。包的导入同样使用import语句或from-import语句实现。建立包的方法：在python的工作目录下的LIB目录建立一个目录，目录名就是包的名字，将模块置入包中。

属性是·号之后的```z.real```中的```real```是对象z的一个属性。

对象是面向对象程序中的基本单位，是一种复合数据类型，是程序基本要素，它封装了一类对象的状态和方法。
相似的对象可以和传统语言中的变量与类型关系一样，归并到一类中去，因而对象是由类创建的，类是同一类型对象（具有相似行为的对象）的集合和抽象，是面向对象语言必须提供的由用户定义的数据类型，它将具有相同状态、行为和访问机制的多个对象抽象成一个类。定义类之后，属于这种类的一个对象称为类实例或类对象。类代表一般，而类的一个对象代表具体，每一类都是一种对象类型的数据，属于不同类的对象具有不同的数据类型。对象是在执行过程中由所属的类动态生成的，一个类可以生成多个不同的对象。如汽车类可以生成小轿车和卡车等不同对象。但每个类的所有对象都具有相同的行为。可以加速减速，同时每一个对象的内部状态（即私有属性）却只能由其自身来修改，任何别的对象不能修改它

### 消息和方法

消息（message）就是用来请求对象执行某一处理或回答某些信息的要求，消息统一了数据和控制流。当对某一对象进行相应处理时，如果需要，可以通过传递消息请求其他对象完成某些处理工作或回答某些信息。其他对象在执行所要求的处理时，也可以通过传递消息与别的对象联系。

一个消息值包含三方面的内容，接受消息的对象；接受者应采取的方法；方法所需要的参数。同时接收消息的对象在执行完相应方法后，可能会给发生者返回一些信息。这样，对象通过消息机制，建立起了相互关系。由于任何一个对象的所有行为都可以用方法来描述，所以消息机制可以完全实现对象之间的交互。

方法（method）是类的行为属性的总称，是允许作用于该类对象上的各种操作。一个类可以有多种方法，表示该类所具有的功能和操作，通过对象调用类中的方法就可以改变对象域中变量的值。如汽车类就有加速减速的方法，通过一个对象调用加速方法就可以改变对象中保存当前速度的实例变量的值，即改变状态。方法只有绑定到实例上才能使用。

### 面向对象的基本特征

1. 封装性。 封装性（Encapsulation）是指把对象属性和操作结合起来，构成独立的单元，内部信息对外界隐蔽，不允许外界直接存取对象的属性，只能通过有限的接口与对象发生联系。这样，在实现对象本身是，只须考虑如何实现这些提供给外部使用的成员方法。
2. 继承性。 类的继承性（Inheritance）指的是从已有的一个类可以构造信度类，使得新类具有原类的所有特性，并且新类还可以增加一些新的特性。根据继承和被继承的关系，可以分为父类和子类，子类可以从父类哪里获得所有的属性和方法，并且可以对这些获得的属性和方法进行改造，使之具有自己的特点。
   继承性具有传递性，子类又可以派生出下一代孙类。
3. 多态性。 对象根据接受的消息而做出动作，同样的消息被不同的对象接受时可导致完全不同的行动，这种现象称为多态性（Polymorphism）。多态性机制不仅仅增加了面向对象软件系统的灵活性，进一步减少了信息冗余，而且显著地提高了软件的可重用性和可扩充性。









### 身份证的验证

发现了一个超有意思的事情，中国公民的身份证号码有18位数字，最后一位是校验码，它根据身份证的前17位数字计算得到。程序如下

```python
s=input('input your id(1--17 bit):')
a = list(s)
for i in range(17):
   a[i]=eval(a[i])
w=[7,9,10,5,8,4,2,1,6,3,7,9,10,5,8,4,2]
s=0
for i in range(17):
    s = s + a[i]*w[i]
s=s%11
#在下面的字典中，s的值作为键，对应的值是身份证的校验码
d={0:'1',1:'0',2:'X',3:'9',4:'8',5:'7',6:'6',7:'5',8:'4',\
9:'3',10:'2'}
if s in d:
   print(d.get(s))
```
至少对于我身份证的最后一位预测是对的。

学习Python，首先要明确自己要做什么任务，要使用哪些模块，以自己需要的模块为中心学习，而不是像C++和Java那样，以语言本身或者设计模式为主要学习内容。这一点其实与MATLAB很相像，只学习MATLAB的语法可以说毫无意义，真正有用的学习你所需要的MATLAB各个函数的用法。

Machine Learning in Action 从机器学习或者web或者爬虫入手Python会比较有成就感


## 用python玩转数据 ##
python 用下划线和字母开头，下划线开头的表示私有变量，不常用。
```python
    PI = pi = 3.1415926 # 连等号赋值
    PI，R = 3.1415,3 # 元组赋值，建议写括号
```

